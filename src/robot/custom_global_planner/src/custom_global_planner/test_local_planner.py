#!/usr/bin/env python3

import custom_global_planner_function as cgpf
import math 
import numpy as np
import obstacle_coordinate
import msg2mat
from matplotlib import pyplot
from matplotlib.patches import *

def test_trajectory(x1, y1, ori1,
                    x2, y2, ori2,
                    costmap, costmap_resolution,
                    costmap_origin_x, costmap_origin_y,
                    should_be_successful, eps = 0.1):
    # trying to trace a trajectory
    success, traj = cgpf.make_trajectory(x1, y1, ori1,
                    x2, y2, ori2,
                    costmap, costmap_resolution,
                    costmap_origin_x, costmap_origin_y, True)
    if (should_be_successful != success):
        print('Fiels "success" is not equal to the awaited value')
        return False
    if success:
        if math.hypot(x1 - x2, y1 - y2) > eps and len(traj) == 0:
            print('The trajectory is empty')
            return False
        # check initial and final points
        if math.hypot(x1 - traj[0][0], y1 - traj[0][1]) > eps:
            print('Initial points do not match')
            return False
        if math.hypot(x2 - traj[-1][0], y2 - traj[-1][1]) > eps:
            print('Final points do not match')
            return False
        #create figure
        fig = pyplot.figure()
        ax = fig.add_subplot()
        #paint trajectory
        ax.plot([v[0] for v in traj], [v[1] for v in traj],'o-')
        #paint start anf goal
        ax.plot(x1, y1, 'gD', x2, y2, 'rD')
        #paint obstacles
        x_o, y_o = obstacle_coordinate.obstacle_coordinate(costmap)
        print('x_o', x_o)
        print('y_o', y_o)
        print('costmap', costmap)
        print('costmap_resolution', costmap_resolution)
        pyplot.title("Trajectory")
        for i in range(len(x_o)):
            rect = Rectangle((x_o[i], y_o[i]-costmap_resolution), costmap_resolution, costmap_resolution, color='r', alpha=0.5, zorder=2550)
            ax.add_patch(rect)
        #rect = Rectangle((2, 2), 3, 3, color='r', alpha=0.5, zorder=2550)
       # ax.add_patch(rect)
        #paint formal text
        pyplot.xlabel('x, metres')
        pyplot.ylabel('y, metres')
        ax.set_aspect(aspect = "equal")
        ax.set_xlim(0,6)
        ax.set_ylim(0,6)
        pyplot.grid()
        pyplot.show()
    return True


#test_trajectory(0,  0,  0,  3.63899564743042 ,  3.5336558818817139 ,  3.1058104038238525 ,  [[0, 0, 0, 0], [0, 0, 254, 0], [0, 0, 0, 0], [0, 0, 0, 0]] ,  1.0 ,  0.0 ,  0.0, True)

"""
test_trajectory(0, 0, 0, 3, 0, 0,  [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
                                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
                                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
                                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
                                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
                                   [0, 0, 0, 255, 255, 255, 255, 255, 0, 0], 
                                   [0, 0, 0, 255, 0, 0, 0, 0, 0, 0], 
                                   [0, 0, 0, 255, 0, 0, 0, 0, 0, 0], 
                                   [0, 0, 0, 255, 0, 0, 0, 0, 0, 0], 
                                   [0, 0, 0, 255, 255, 255, 255, 255, 0, 0], 
                                   [0, 0, 0, 255, 0, 0, 0, 0, 0, 0], 
                                   [0, 0, 0, 255, 0, 0, 0, 0, 0, 0], 
                                   [0, 0, 0, 255, 0, 0, 0, 0, 0, 0], 
                                   [0, 0, 0, 255, 0, 0, 0, 0, 0, 0], 
                                   [0, 0, 0, 255, 255, 255, 255, 255, 0, 0]], 1.0 ,  0.0 ,  0.0, True)
"""                                   

test_trajectory(1, 1, 0, 6, 8, 0, 
                [
                    [0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 255, 255, 255, 255, 255],
                    [0, 0, 0, 255, 0, 0, 0],
                    [0, 0, 0, 255, 0, 0, 0],
                    [0, 0, 0, 255, 0, 0, 0],
                    [0, 0, 0, 255, 0, 0, 0],
                    [0, 0, 0, 255, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0]
                ],
                1, 0, 0, True)
exit()
    
test_trajectory(0, 2, 0, 4, 3, 0, 
                [[0,0,0,0], [0,0,0,0], [0,0,255, 0], [0,0,0,0]],
                1, 0, 0, True) #ok

test_trajectory(0, 2, 0, 4, 3, 0, 
                [[0,0,0,0], [0,0,255,0], [0,0,0, 0], [0,0,0,0], [0,0,0,0] ],
                1, 0, 0, True) #ok


test_trajectory(1, 1, 0, 3, 3, 0, 
                [[0]*255]*50,
                1, 0, 0, True)#ok

test_trajectory(1, 3.01, 0, 4, 3.01, 0, 
                [[0,0,0,0], [0,0,0,0], [0,0,255,255], [0,0,0,0]],
                1, 0, 0, True)#ok

test_trajectory(1, 1, 0, 4, 4, 0, 
                [
                    [0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 255, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0]
                ],
                1, 0, 0, True) #ok
                
test_trajectory(1, 1, 0, 6, 8, 0, 
                [
                    [0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 255, 255, 255, 255, 255],
                    [0, 0, 0, 255, 0, 0, 0],
                    [0, 0, 0, 255, 0, 0, 0],
                    [0, 0, 0, 255, 0, 0, 0],
                    [0, 0, 0, 255, 0, 0, 0],
                    [0, 0, 0, 255, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0]
                ],
                1, 0, 0, True) #ok
                

test_trajectory(0, 0, 0, 2.4786670207977295, 0.3050699234008789, 0.013859708793461318, [[16, 36, 65, 149, 226, 149, 65, 36, 16, 8], [36, 65, 149, 226, 254, 226, 149, 65, 36, 16], [65, 149, 226, 254, 254, 254, 226, 149, 65, 26], [83, 226, 254, 254, 254, 254, 254, 226, 83, 30], [65, 149, 226, 254, 254, 254, 226, 149, 65, 26], [36, 65, 149, 226, 254, 226, 149, 65, 36, 16], [65, 149, 226, 254, 254, 254, 226, 149, 65, 26], [83, 226, 254, 254, 254, 254, 254, 226, 83, 30], [65, 149, 226, 254, 254, 254, 226, 149, 65, 26], [36, 65, 149, 226, 254, 226, 149, 65, 36, 16], [16, 36, 65, 149, 226, 149, 65, 36, 16, 8], [8, 16, 36, 65, 83, 65, 36, 16, 8, 4], [4, 8, 16, 26, 30, 26, 16, 8, 4, 2], [2, 4, 7, 9, 11, 9, 7, 4, 2, 1], [1, 1, 2, 3, 4, 3, 2, 1, 1, 0]], 1.0, 0.0, 0.0, True)#ok


test_trajectory(-0.00833494606453708, -0.0038883204393804654, 0.04314161936432046, 8.315561294555664, 0.24235248565673828, 1.76673710346222, [[16, 36, 65, 149, 226, 149, 65, 36, 16, 8], [36, 65, 149, 226, 254, 226, 149, 65, 36, 16], [65, 149, 226, 254, 254, 254, 226, 149, 65, 26], [83, 226, 254, 254, 254, 254, 254, 226, 83, 30], [65, 149, 226, 254, 254, 254, 226, 149, 65, 26], [36, 65, 149, 226, 254, 226, 149, 65, 36, 16], [65, 149, 226, 254, 254, 254, 226, 149, 65, 26], [83, 226, 254, 254, 254, 254, 254, 226, 83, 30], [65, 149, 226, 254, 254, 254, 226, 149, 65, 26], [36, 65, 149, 226, 254, 226, 149, 65, 36, 16], [16, 36, 65, 149, 226, 149, 65, 36, 16, 8], [8, 16, 36, 65, 83, 65, 36, 16, 8, 4], [4, 8, 16, 26, 30, 26, 16, 8, 4, 0], [0, 4, 7, 9, 11, 9, 7, 4, 0, 0], [0, 0, 0, 0, 4, 0, 0, 0, 0, 0]], 1.0, 0.0, 0.0, True)#ok

test_trajectory(-0.004236255852779253, -0.0021321961632186507, 0.023710102352799738, 3.2873165607452393, 0.10415506362915039, -0.23082605004310608, [[30, 83, 226, 254, 254, 254, 254, 254, 226, 83], [30, 83, 226, 254, 226, 226, 226, 226, 149, 65], [30, 83, 226, 254, 226, 83, 83, 83, 65, 36], [30, 83, 226, 254, 226, 83, 83, 83, 65, 36], [30, 83, 226, 254, 226, 226, 226, 226, 149, 65], [30, 83, 226, 254, 254, 254, 254, 254, 226, 83], [30, 83, 226, 254, 226, 226, 226, 226, 149, 65], [30, 83, 226, 254, 226, 83, 83, 83, 65, 36], [30, 83, 226, 254, 226, 226, 226, 226, 149, 65], [30, 83, 226, 254, 254, 254, 254, 254, 226, 83], [26, 65, 149, 226, 226, 226, 226, 226, 149, 65], [16, 36, 65, 83, 83, 83, 83, 83, 65, 36], [8, 16, 26, 30, 30, 30, 30, 30, 26, 16], [4, 7, 9, 11, 11, 11, 11, 11, 9, 7], [0, 0, 0, 4, 4, 4, 4, 4, 0, 0]], 1.0, 0.0, 0.0, True)#ok

test_trajectory(-0.003598718479444577, -0.0018858418591315678, 0.020844314555592727, 10.003111839294434, 11.307409286499023, 1.6617281436920166, [[0, 0, 0, 254, 254, 254, 254, 254, 0, 0], [0, 0, 0, 254, 0, 0, 0, 0, 0, 0], [0, 0, 0, 254, 0, 0, 0, 0, 0, 0], [0, 0, 0, 254, 0, 0, 0, 0, 0, 0], [0, 0, 0, 254, 0, 0, 0, 0, 0, 0], [0, 0, 0, 254, 254, 254, 254, 254, 0, 0], [0, 0, 0, 254, 0, 0, 0, 0, 0, 0], [0, 0, 0, 254, 0, 0, 0, 0, 0, 0], [0, 0, 0, 254, 0, 0, 0, 0, 0, 0], [0, 0, 0, 254, 254, 254, 254, 254, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], 1.0, 0.0, 0.0, True)

test_trajectory(5.651552022234806 ,  7.39737351702918 ,  2.5687290178131255 ,  1.545743465423584 ,  7.535519599914551 ,  2.920811176300049 ,  [[0, 0, 0, 254, 254, 254, 254, 254, 0, 0], [0, 0, 0, 254, 0, 0, 0, 0, 0, 0], [0, 0, 0, 254, 0, 0, 0, 0, 0, 0], [0, 0, 0, 254, 0, 0, 0, 0, 0, 0], [0, 0, 0, 254, 0, 0, 0, 0, 0, 0], [0, 0, 0, 254, 254, 254, 254, 254, 0, 0], [0, 0, 0, 254, 0, 0, 0, 0, 0, 0], [0, 0, 0, 254, 0, 0, 0, 0, 0, 0], [0, 0, 0, 254, 0, 0, 0, 0, 0, 0], [0, 0, 0, 254, 254, 254, 254, 254, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]] ,  1.0 ,  0.0 ,  0.0, True)


